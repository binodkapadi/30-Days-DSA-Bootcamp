SOLUTION ==>

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

bool isPrime(int n) {
    if (n < 2) return false;
    if (n == 2 || n == 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (int i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return false;
    }
    return true;
}

int main() {
    int N;
    cin >> N;

    int count = 0;
    int num = 2;
    int nthPrime = 0;

    // Generate primes until we reach the N-th one
    while (count < N) {
        if (isPrime(num)) {
            count++;
            if (count == N) {
                nthPrime = num;
                break;
            }
        }
        num++;
    }

    long long result = 1LL * nthPrime * nthPrime; // 1LL forces multiplication happen in 64bit avoid overflow for large prime numbers
    cout << result << endl;
    return 0;
}
